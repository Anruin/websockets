<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
<!ENTITY % doc.mod SYSTEM "doc.mod" >
%doc.mod;
]>

<chapter version="5.0"
    xml:id="ws.intro"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:mml="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook">

<title>Introduction</title>

<section id="ws.intro.about"><title>Project Overview</title>

<para>VRTQL WebSockets is a robust and performance-oriented WebSocket library
written in C. It provides a simple yet flexible API for building WebSocket
clients and servers. It supports all standard WebSocket features including text
and binary messages, ping/pong frames, control frames and includes built-in
OpenSSL support.</para>

<para>The motivation behind the project is to have a portable WebSockets client
library under a permissive license (MIT) which feels like a traditional socket
API (blocking with optional timeout) which can also provide a foundation for
some additional messaging features similar to (but lighter weight than) AMQP and
MQTT.</para>

<para>The code compiles and runs on Linux, FreeBSD, NetBSD, OpenBSD, OS X,
Illumos/Solaris and Windows. It is fully commented and well-documented.
Furthermore, the code is under a permissive license (MIT) allowing its use in
commercial (closed-source) applications. The build system (CMake) includes
built-in support to for cross-compiling from Linux/BSD to Windows, provided
MinGW compiler and tools are installed on the host system. Instructions on
cross-compiling are covered in <xref linkend="ws.build.windows"/>.</para>

<para>There are two parts to the library: a client-side component and an
optional server-side component. The library was initially written for
client-side only. The server component was added shortly after the client code
was completed. The two components are built from completely different networking
designs, each suited to their particular use-cases. The client architecture is
designed for single connections and operates synchronously, waiting for
responses from the server. The server architecture is designed for many
concurrent connections and operates asynchronously.</para>

<para>The client-side API is simple and flexible. Connections wait (block) for
responses and can employ a timeout in which to take action if a response does
not arrive in a timely manner (or at all). The API is threadsafe in so far as
each connection must be maintained in its own thread. All global structures and
common services (error-reporting and tracing) use thread-local variables. The
API runs atop the native operating systemâ€™s networking facilities, using
<function>poll()</function> and thus no additional libraries are
required.</para>

<para>The server-side API implements a non-blocking, multiplexing, multithreaded
server atop <filename><link
xlink:href="https://libuv.org/">libuv</link></filename>. The server consists of
a main networking thread and a pool of worker threads that process the data. The
networking thread runs the <filename>libuv</filename> loop to handle socket I/O
and evenly distributes incoming data to the worker threads via a synchronized
queue. The worker threads process the data and optionally send back replies via
a separate queue. The server takes care of all the WebSocket protocol
serialization and communication between the the network and worker
threads. Developers only need to focus on the actual message processing logic to
service incoming messages.</para>

<para>The requirement of <filename>libuv</filename> is what makes the server
component optional. While <filename>libuv</filename> runs on every major
operating system, it is not expected to be a requirement of this library, as its
original intent was to provide client-side connections only. Thus if you want
use the server-side API, you simple add a configuration switch at build time to
include the code (covered in <xref linkend="ws.build"/>).</para>

</section> <!-- ws.intro.about -->

<section id="ws.intro.ws"><title>WebSocket Overview</title>

<para>WebSockets significantly enhance the capabilities of web applications
compared to standard HTTP or raw TCP connections. They enable real-time data
exchange with reduced latency due to the persistent connection, making them
ideal for applications like live chat, gaming, real-time trading, and live
sports updates.</para>

<para>Several large-scale applications and platforms utilize WebSockets today,
including Slack, WhatsApp, and Facebook for real-time messaging. WebSockets are
also integral to the functionality of collaborative coding platforms like
Microsoft's Visual Studio Code Live Share. On the server-side, many popular
software systems support WebSocket, including Node.js, Apache, and Nginx.</para>

<section id="ws.overview.ws.bg"><title>Background</title>

<para>Websockets emerged in the late 2000s in response to the growing need for
real-time, bidirectional communication in web applications. The goal was to
provide a standardized way for web servers to send content to browsers without
being prompted by the user, and vice versa. In December 2011 they were
standardized by the Internet Engineering Task Force (IETF) in RFC 6455. They now
enjoy wide support and integration in modern browsers, smartphones, IoT devices
and server software. They have become a fundamental technology in modern web
applications.</para>

</section> <!-- ws.intro.ws.bg-->

<section id="ws.overview.concepts"><title>Concepts and Operation</title>

<para>Unlike traditional HTTP connections, which are stateless and
unidirectional, WebSocket connections are stateful and bidirectional. The
connection is established through an HTTP handshake (HTTP Upgrade request),
which is then upgraded to a WebSocket connection if the server supports it. The
connection remains open until explicitly closed, enabling low-latency data
exchange.</para>

<para>The WebSocket protocol communicates through a series of data units called
frames. Each WebSocket frame has a maximum size of 2^64 bytes (but the actual
size limit may be smaller due to network or system constraints). There are
several types of frames, including text frames, binary frames, continuation
frames, and control frames.</para>

<para>Text frames contain Unicode text data, while binary frames carry binary
data. Continuation frames allow for larger messages to be broken down into
smaller chunks. Control frames handle protocol-level interactions and include
close frames, ping frames, and pong frames. The close frame is used to terminate
a connection, ping frames are for checking the liveness of the connection, and
pong frames are responses to ping frames.</para>

</section> <!-- ws.intro.ws.concepts-->

</section> <!-- ws.intro.overview -->

<section id="ws.build"><title>Building and Installing</title>

<section id="ws.build.src"><title>Building from Source</title>

<para>In order to build the code you need CMake version 3.0 or higher on your
system. Build as follows:

<screen>
<prompt>$</prompt> git clone https://github.com/vrtql/websockets.git
<prompt>$</prompt> cd websockets
<prompt>$</prompt> cmake .
<prompt>$</prompt> make
<prompt>$</prompt> sudo make install
</screen>

</para>

<para>Unit tests are located in <filename>test</filename>. As a basic test of
operation, you can run the <filename>test_websockets</filename> test. To run it,
first start the server as follows:

<screen>
<prompt>$</prompt> cd test
<prompt>$</prompt> ./server
</screen>

This is just a simple echo server example from the <link
xlink:href="https://mongoose.ws/">Mongoose project</link>, used for
testing. There is simple Mongoose-based client program in the
<filename>test</filename> directory as well called <filename>client</filename>
which can be used to test general connectivity. After the server is started, run
<filename>test_websockets</filename> to see that everything is working:

<screen>
<prompt>$</prompt> ./test_websockets
TEST 1/4 test:send_receive

+----------------------------------------------------+
| Frame Sent                                         |
+----------------------------------------------------+
  header:   6 bytes
  fin:      1
  opcode:   1
  mask:     1 (0xb95d570f)
  payload:  7 bytes

da 32 39 7b dc 33 23
------------------------------------------------------

+----------------------------------------------------+
| Frame Received                                     |
+----------------------------------------------------+
  header:   2 bytes
  fin:      1
  opcode:   1
  mask:     0 (0x00000000)
  payload:  7 bytes

  .
  .
  .
</screen>

This will connect to the server and run various send/receive tests dumping the
frames sent to and received from the server to the console.</para>

</section> <!-- ws.build.src -->

<section id="ws.build.windows"><title>Cross Compiling</title>

<para>You must have the requisite MinGW compiler and tools installed on your
system. For Debian/Devuan you would install these as follows:

<screen>
<prompt>$</prompt> sudo apt-get install mingw-w64 mingw-w64-tools mingw-w64-common \
                  g++-mingw-w64-x86-64 mingw-w64-x86-64-dev
</screen>

</para>

<para>You will need to have OpenSSL for Windows on your system as well. If you
don't have it you can build as follows. First download the version you want to
build. Here we will use <filename>openssl-1.1.1u.tar.gz</filename> as an
example. Create the install directory you intend to put OpenSSL in. For example:

<screen>
<prompt>$</prompt> mkdir ~/mingw
</screen>

Build OpenSSL. You want to ensure you set the <literal>--prefix</literal> to the
directory you specified above. This is where OpenSSL will install to.

<screen>
<prompt>$</prompt> cd /tmp
<prompt>$</prompt> tar xzvf openssl-1.1.1u.tar.gz
<prompt>$</prompt> cd openssl-1.1.1u
<prompt>$</prompt> ./Configure --cross-compile-prefix=x86_64-w64-mingw32- \
              --prefix=~/mingw shared mingw64 no-tests
<prompt>$</prompt> make
<prompt>$</prompt> make DESTDIR=~/mingw install
</screen>

Now within the <filename>websockets</filename> project. Modify the
<varname>CMAKE_FIND_ROOT_PATH</varname> in the
<filename>config/windows-toolchain.cmake</filename> file to point to where you
installed OpenSSL. The line to modify is shown in bold below:

<programlisting>
set(CMAKE_SYSTEM_NAME Windows)
set(TOOLCHAIN_PREFIX x86_64-w64-mingw32)

# cross compilers to use for C, C++
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)
set(CMAKE_Fortran_COMPILER ${TOOLCHAIN_PREFIX}-gfortran)
set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)

# Set to where you have it installed
<strong>set(CMAKE_FIND_ROOT_PATH "/home/bubba/mingw/openssl")</strong>

# modify default behavior of FIND_XXX() commands
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
</programlisting>

In this example it would be
<filename>~/mingw/openssl</filename> (you might want to use full path). Then
invoke CMake as follows:

<screen>
<prompt>$</prompt> cmake -DCMAKE_TOOLCHAIN_FILE=config/windows-toolchain.cmake
</screen>

Then build as normal:

<screen>
  <prompt>$</prompt> make
</screen>
</para>

</section> <!-- ws.build.windows -->

</section> <!-- ws.build -->

</chapter> <!-- ws.intro -->
