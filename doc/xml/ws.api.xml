<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
<!ENTITY % doc.mod SYSTEM "doc.mod" >
%doc.mod;
]>

<chapter version="5.0"
    xml:id="ws.api"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:mml="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook">

<title>C API</title>

<para>There are two APIs in the library: the WebSockts API and the Messaging
API.</para>

<section id="ws.api.ws"><title>Websocket API</title>

<para>The WebSockets API is built solely upon WebSocket constructs: frames,
messages and connections, as you would expect. It intuitively follows the
concepts and structure laid out in the standard. The following is a basic
example of the Websockets API:

<sourcecode href="ws.api.ws.example-1.cpp"/>

</para>

</section> <!-- ws.api.ws -->

<section id="ws.api.ws"><title>Messaging API</title>

<para>The Messaging API is built on top of the WebSockets API. While WebSockets
provide a mechanism for real-time bidirectional communication, it doesn't
inherently offer things like you would see in more heavyweight message protocols
like AMQP. The Messaging API provides a small step in that direction, but
without the heft. It mainly provides a more structured message format with
built-in serialization. The message structure includes two maps (hashtables of
string key/value pairs) and a payload. One map, called
<varname>routing</varname>, is designed to hold routing information for
messaging applications. The other map, called <varname>headers</varname>, is for
application use. The payload can hold both text and binary data.</para>

<para>The message structure operates with a higher-level connection API which
works atop the native WebSocket API. The connection API mainly adds support to
send and receive the messages, automatically handling serialization and
deserialization on and off the wire. It really just boils down to
<function>send()</function> and <function>receive()</function> calls which
operate with these messages.</para>

<para>Messages can be serialized in two formats: JSON and MessagePack. Both
formats can be sent over the same connection on a message-by-message basis. That
is, the connection is able to auto-detect each incoming message's format and
deserialize accordingly. Thus connections support mixed-content messages: JSON
and MessagePack.</para>

<para>The following is a basic example of using the high-level messaging API.

<sourcecode href="ws.api.msg.example-1.cpp"/>

</para>

</section> <!-- ws.api.msg -->

</chapter> <!-- ws.api -->
